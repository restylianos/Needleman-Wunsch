[{"C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\bioinformatics\\src\\index.js":"1","C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\bioinformatics\\src\\components\\App.js":"2","C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\bioinformatics\\src\\components\\Needleman.js":"3","C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\Needleman-Wunsch\\src\\index.js":"4","C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\Needleman-Wunsch\\src\\components\\App.js":"5","C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\Needleman-Wunsch\\src\\components\\Needleman.js":"6","C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\Needleman-Wunsch\\src\\components\\Smith.js":"7","C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\Needleman-Wunsch\\src\\components\\Footer.js":"8","C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\Needleman-Wunsch\\src\\assets\\css\\Particles.js":"9"},{"size":208,"mtime":1610124631569,"results":"10","hashOfConfig":"11"},{"size":3689,"mtime":1610922553931,"results":"12","hashOfConfig":"11"},{"size":2932,"mtime":1610931780369,"results":"13","hashOfConfig":"11"},{"size":208,"mtime":1610124631569,"results":"14","hashOfConfig":"15"},{"size":8742,"mtime":1611593207601,"results":"16","hashOfConfig":"15"},{"size":2964,"mtime":1611573333249,"results":"17","hashOfConfig":"15"},{"size":2520,"mtime":1611573358272,"results":"18","hashOfConfig":"15"},{"size":551,"mtime":1611319399882,"results":"19","hashOfConfig":"15"},{"size":4469,"mtime":1611417431493,"results":"20","hashOfConfig":"15"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1m12y5g",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1yzkxua",{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\bioinformatics\\src\\index.js",[],["44","45"],"C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\bioinformatics\\src\\components\\App.js",[],"C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\bioinformatics\\src\\components\\Needleman.js",[],"C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\Needleman-Wunsch\\src\\index.js",[],["46","47"],"C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\Needleman-Wunsch\\src\\components\\App.js",["48","49","50","51"],"import React, { useState } from 'react';\r\nimport '../../node_modules/bulma/css/bulma.css';\r\nimport Needleman from './Needleman';\r\nimport { BrowserRouter, Link, Route } from 'react-router-dom';\r\nimport Smith from './Smith';\r\nimport Particles from 'react-particles-js';\r\nimport '../assets/css/app.css';\r\nimport { particlesOptions, blackparticlesOptions } from '../assets/css/Particles';\r\nimport Footer from './Footer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faLightbulb } from '@fortawesome/free-solid-svg-icons';\r\nimport '../assets/css/dark.css';\r\n\r\nconst App = () => {\r\n  const [firstSequence, setFirstSequence] = useState('');\r\n  const [secondSequence, setSecondSequence] = useState('');\r\n  const [modal, setModal] = useState('');\r\n  const [gap, setGap] = useState(-8);\r\n  const [match, setMatch] = useState(15);\r\n  const [sub, setSub] = useState(-3);\r\n  const [darkTheme, setDarkTheme] = useState(false);\r\n\r\n  if (darkTheme) {\r\n    document.documentElement.classList.add('darkmode');\r\n  }\r\n  if (!darkTheme) {\r\n    document.documentElement.classList.remove('darkmode');\r\n  }\r\n\r\n  const changeModalState = (e) => {\r\n    if (modal === 'is-active') {\r\n      setModal('');\r\n    } else {\r\n      setModal('is-active');\r\n    }\r\n  };\r\n  const updateFirstFreq = (e) => {\r\n    setFirstSequence(e.target.value.toUpperCase());\r\n  };\r\n\r\n  const updateSecondFreq = (e) => {\r\n    setSecondSequence(e.target.value.toUpperCase());\r\n  };\r\n\r\n  const updateUserGap = (e) => {\r\n    let res = parseInt(e.target.value);\r\n    if (isNaN(res)) {\r\n      return;\r\n      //debug for updating values\r\n    }\r\n    setGap(res);\r\n  };\r\n\r\n  const updateUserMatch = (e) => {\r\n    let res = parseInt(e.target.value);\r\n    if (isNaN(res)) {\r\n      return;\r\n      //debug for updating values\r\n    }\r\n    setMatch(res);\r\n  };\r\n\r\n  const updateUserSub = (e) => {\r\n    let res = parseInt(e.target.value);\r\n    if (isNaN(res)) {\r\n      return;\r\n      //debug for updating values\r\n    }\r\n    setSub(res);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Particles\r\n        params={darkTheme === false ? particlesOptions() : blackparticlesOptions()}\r\n        canvasClassName=\"background-canvas\"\r\n      />\r\n      <div className=\"container\">\r\n        <div className=\"has-text-centered pt-6\">\r\n          <h1 className=\"title is-1\"> Sequence Alignment</h1>\r\n          <h6 className=\"subtitle is-6\">v1.0.1 </h6>\r\n        </div>\r\n        <section className=\"section\">\r\n          <div className=\"box\">\r\n            <div className=\"field\">\r\n              <label className=\"label\">First sequence</label>\r\n              <div className=\"control\">\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"text\"\r\n                  placeholder=\"ex. GAWGHEE\"\r\n                  onChange={(e) => updateFirstFreq(e)}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"field\">\r\n              <label className=\"label\">Second sequence</label>\r\n              <div className=\"control\">\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"text\"\r\n                  placeholder=\"ex. WHEAE\"\r\n                  onChange={(e) => updateSecondFreq(e)}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"columns\">\r\n              <div className=\"column\">\r\n                <div className=\"field\">\r\n                  <label className=\"label has-text-centered\">Match</label>\r\n                  <div className=\"control\">\r\n                    <input\r\n                      className=\"input\"\r\n                      type=\"number\"\r\n                      placeholder=\"Default value is 15\"\r\n                      onChange={(e) => updateUserMatch(e)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"column\">\r\n                <div className=\"field\">\r\n                  <label className=\"label has-text-centered\">Missmatch</label>\r\n                  <div className=\"control\">\r\n                    <input\r\n                      className=\"input\"\r\n                      type=\"number\"\r\n                      placeholder=\"Default value is -3\"\r\n                      onChange={(e) => updateUserSub(e)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"column\">\r\n                <div className=\"field\">\r\n                  <label className=\"label has-text-centered\">Gap</label>\r\n                  <div className=\"control\">\r\n                    <input\r\n                      className=\"input\"\r\n                      type=\"number\"\r\n                      placeholder=\"Default value is -8\"\r\n                      onChange={(e) => updateUserGap(e)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {firstSequence && secondSequence && (\r\n              <div className=\"columns is-fullheight\">\r\n                <div className=\"column\">\r\n                  <Needleman\r\n                    first_sequence={firstSequence}\r\n                    second_sequence={secondSequence}\r\n                    gap={gap}\r\n                    sub={sub}\r\n                    match={match}\r\n                  ></Needleman>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <Smith\r\n                    first_sequence={firstSequence}\r\n                    second_sequence={secondSequence}\r\n                    gap={gap}\r\n                    sub={sub}\r\n                    match={match}\r\n                  ></Smith>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"has-text-centered\">\r\n            <button\r\n              className=\"button is-large\"\r\n              onClick={(e) => (darkTheme === false ? setDarkTheme(true) : setDarkTheme(false))}\r\n            >\r\n              <FontAwesomeIcon icon={faLightbulb} />\r\n            </button>\r\n            <br></br>\r\n            <br></br>\r\n            <a className=\"has-text-centered\" onClick={(e) => changeModalState(e)}>\r\n              Learn more\r\n            </a>\r\n            <div class={`modal ${modal}`}>\r\n              <div class=\"modal-background\"></div>\r\n              <div className=\"modal-card\">\r\n                <header className=\"modal-card-head\">\r\n                  <p className=\"modal-card-title\">\r\n                    <b>About Sequence Alignment</b>\r\n                  </p>\r\n                  <button\r\n                    className=\"delete\"\r\n                    onClick={(e) => changeModalState(e)}\r\n                    aria-label=\"close\"\r\n                  ></button>\r\n                </header>\r\n                <section className={`modal-card-body $`}>\r\n                  This project was made to automate an exercise of the bioninformatics class. After\r\n                  typing the the first and the second sequence two functions are triggered. The\r\n                  following algorithms are used:\r\n                  <div className=\"content\">\r\n                    <ol className=\"is-lower-roman\">\r\n                      <li>\r\n                        <a href=\"https://en.wikipedia.org/wiki/Needleman%E2%80%93Wunsch_algorithm\">\r\n                          Needleman–Wunsch algorithm\r\n                        </a>\r\n                      </li>\r\n                      <li>\r\n                        <a href=\"https://en.wikipedia.org/wiki/Smith%E2%80%93Waterman_algorithm\">\r\n                          Smith-Waterman algorithm\r\n                        </a>\r\n                      </li>\r\n                    </ol>\r\n                  </div>\r\n                  Moreover, the whole project is <b>responsive</b> since Bulma is used. Feel free to\r\n                  suggest any changes or report any bugs at my github account{' '}\r\n                  <a href=\"https://github.com/restylianos\">here</a>. The project is under MIT\r\n                  license. You can find out more about the license here{' '}\r\n                  <a href=\"https://github.com/git/git-scm.com/blob/master/MIT-LICENSE.txt\">MIT</a>.\r\n                  Finally, the project was made using React 🤖, and ninja tactics 🐱‍👤.\r\n                </section>\r\n                <footer className=\"modal-card-foot\">\r\n                  <div className=\"has-text-centered\">\r\n                    <button className=\"button is-danger\" onClick={(e) => changeModalState(e)}>\r\n                      Close\r\n                    </button>\r\n                  </div>\r\n                </footer>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <Footer></Footer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\Needleman-Wunsch\\src\\components\\Needleman.js",["52"],"import React, { useEffect } from 'react';\r\n\r\nconst Needleman = ({ first_sequence, second_sequence, gap, sub, match }) => {\r\n  const seq1 = first_sequence;\r\n  const seq2 = second_sequence;\r\n\r\n  var m = seq1.length;\r\n  var n = seq2.length;\r\n\r\n  // array creation\r\n\r\n  var arr = [[]];\r\n\r\n  for (let j = 0; j <= n; j++) arr[0][j] = j * gap;\r\n\r\n  for (let i = 1; i <= m; i++) {\r\n    arr[i] = [i * gap];\r\n\r\n    for (let j = 1; j <= n; j++)\r\n      arr[i][j] = Math.max(\r\n        arr[i - 1][j] + gap,\r\n        arr[i][j - 1] + gap,\r\n        arr[i - 1][j - 1] + (seq1[i - 1] === seq2[j - 1] ? match : sub)\r\n      );\r\n  }\r\n\r\n  // backtracking\r\n\r\n  let out1 = '';\r\n  let out2 = '';\r\n\r\n  while (m > 0 && n > 0) {\r\n    if (arr[m][n] === arr[m - 1][n] + gap) {\r\n      m--;\r\n      out1 = seq1[m] + out1;\r\n      out2 = '-' + out2;\r\n    } else if (arr[m][n] === arr[m][n - 1] + gap) {\r\n      n--;\r\n      out1 = '-' + out1;\r\n      out2 = seq2[n] + out2;\r\n    } else {\r\n      m--;\r\n      n--;\r\n      out1 = seq1[m] + out1;\r\n      out2 = seq2[n] + out2;\r\n    }\r\n  }\r\n\r\n  out1 = seq1.slice(0, m) + new Array(n + 1).join('-') + out1;\r\n  out2 = seq2.slice(0, n) + new Array(m + 1).join('-') + out2;\r\n\r\n  // the (messy) drawing part begins here\r\n  const res_1 = out1;\r\n  const res_2 = out2;\r\n\r\n  const final_seq_1 = seq1.substring(0, 0) + ' ' + seq1.substring(0, seq1.length);\r\n  const final_seq_2 = seq2.substring(0, 0) + '  ' + seq2.substring(0, seq2.length);\r\n\r\n  //fix arrays\r\n  const renderedTitles_x = [...final_seq_2].map((amino, index) => {\r\n    return (\r\n      <th key={index}>\r\n        <abbr title=\"Position\">{amino}</abbr>\r\n      </th>\r\n    );\r\n  });\r\n\r\n  const renderedResults = arr.map((row, index) => {\r\n    const res = row.map((item, secondIndex) => {\r\n      return <td key={secondIndex}>{item}</td>;\r\n    });\r\n\r\n    const renderedTtitles_y = [...final_seq_1].map((amino, aminoIndex) => {\r\n      //console.log(amino);\r\n      return <th key={aminoIndex + 20}>{amino}</th>;\r\n    });\r\n\r\n    return (\r\n      <tr key={index}>\r\n        <th>{renderedTtitles_y[index].props.children}</th>\r\n        {res}\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <section className=\"section\">\r\n      <h3 className=\"title is-3 has-text-centered\">Needleman-Wunsch</h3>\r\n      <div className=\"column\">\r\n        <div className=\"table-container\">\r\n          <table\r\n            className=\"table is-bordered is-hoverable\"\r\n            style={{ marginLeft: 'auto', marginRight: 'auto' }}\r\n          >\r\n            <thead>\r\n              <tr>{renderedTitles_x}</tr>\r\n            </thead>\r\n            <tbody>{renderedResults}</tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"has-text-centered\">\r\n        <h4 className=\"has-text-centered title is-4\">Alignment</h4>\r\n        <h5 className=\"title is-5 has-text-centered\">{res_1}</h5>\r\n        <h5 className=\"title is-5 has-text-centered\">{res_2}</h5>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Needleman;\r\n","C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\Needleman-Wunsch\\src\\components\\Smith.js",[],"C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\Needleman-Wunsch\\src\\components\\Footer.js",[],"C:\\Users\\stelios\\Desktop\\git\\Bioinformatics\\Needleman-Wunsch\\src\\assets\\css\\Particles.js",[],["53","54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"55","replacedBy":"59"},{"ruleId":"57","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":4,"column":10,"nodeType":"63","messageId":"64","endLine":4,"endColumn":23},{"ruleId":"61","severity":1,"message":"65","line":4,"column":25,"nodeType":"63","messageId":"64","endLine":4,"endColumn":29},{"ruleId":"61","severity":1,"message":"66","line":4,"column":31,"nodeType":"63","messageId":"64","endLine":4,"endColumn":36},{"ruleId":"67","severity":1,"message":"68","line":181,"column":13,"nodeType":"69","endLine":181,"endColumn":83},{"ruleId":"61","severity":1,"message":"70","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":26},{"ruleId":"55","replacedBy":"71"},{"ruleId":"57","replacedBy":"72"},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],["73"],["74"],"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Route' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.",["73"],["74"],"no-global-assign","no-unsafe-negation"]